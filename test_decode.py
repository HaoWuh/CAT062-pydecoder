from decoder.decode import byte_decoder
from decoder.read import Raw_Reader
from decoder.decode_func import decode_functions

bytes= [62, 0, 95, 159, 125, 11, 2, 1, 1, 54, 199, 34, 0, 88, 145, 231, 1, 90, 114, 4, 0, 3, 114, 255, 250, 136, 0, 13, 255, 218, 12, 65, 64, 13, 50, 56, 215, 72, 32, 128, 120, 33, 37, 2, 116, 1, 17, 128, 128, 0, 255, 204, 1, 1, 67, 83, 72, 56, 53, 52, 32, 0, 0, 1, 18, 140, 66, 51, 56, 77, 77, 86, 84, 66, 83, 90, 83, 80, 68, 51, 53, 76, 1, 64, 7, 37, 0, 49, 49, 56, 32, 32, 32, 4, 64]

# bytes=[0x3e, 0x00, 0xc7, 0x81, 0x01, 0x02, 0x19, 0x19, 0xef, 0xcc, 0x19, 0x19, 0x43, 0x43, 0x41, 0x31, 0x35, 0x31, 0x37, 0x00, 0x00, 0x20, 0x8e, 0x41, 0x33, 0x32, 0x31, 0x4d, 0x5a, 0x42, 0x41, 0x41, 0x5a, 0x53, 0x53, 0x53, 0x33, 0x36, 0x52, 0x02, 0x40, 0x07, 0x18, 0x00, 0x50, 0x07, 0x16, 0x00, 0x32, 0x32, 0x37, 0x20, 0x20, 0x20, 0x81, 0x01, 0x02, 0x19, 0x19, 0xef, 0xcc, 0x19, 0x19, 0x43, 0x53, 0x4e, 0x36, 0x39, 0x38, 0x31, 0x00, 0x00, 0x1d, 0x12, 0x42, 0x37, 0x33, 0x38, 0x4d, 0x5a, 0x57, 0x57, 0x57, 0x5a, 0x53, 0x53, 0x53, 0x33, 0x36, 0x52, 0x01, 0x40, 0x07, 0x35, 0x00, 0x32, 0x36, 0x36, 0x20, 0x20, 0x20, 0x81, 0x01, 0x02, 0x19, 0x19, 0xef, 0xcc, 0x19, 0x19, 0x43, 0x45, 0x53, 0x32, 0x31, 0x35, 0x39, 0x00, 0x00, 0x21, 0x7c, 0x41, 0x32, 0x30, 0x4e, 0x4d, 0x5a, 0x4c, 0x58, 0x59, 0x5a, 0x53, 0x53, 0x53, 0x33, 0x36, 0x52, 0x02, 0x40, 0x07, 0x2d, 0x00, 0x50, 0x07, 0x2b, 0x00, 0x34, 0x31, 0x32, 0x20, 0x20, 0x20, 0x81, 0x01, 0x02, 0x19, 0x19, 0xef, 0xcc, 0x19, 0x19, 0x43, 0x45, 0x53, 0x35, 0x31, 0x31, 0x34, 0x00, 0x00, 0x14, 0x3d, 0x41, 0x33, 0x33, 0x32, 0x48, 0x5a, 0x42, 0x41, 0x41, 0x5a, 0x53, 0x53, 0x53, 0x33, 0x36, 0x52, 0x01, 0x40, 0x07, 0x32, 0x00, 0x32, 0x33, 0x30, 0x20, 0x20, 0x20]


# single test!
# BD= byte_decoder(data= bytes)
# print(BD.process_byte_data())
# BD.save2json()

# RR= Raw_Reader("data/sample.raw")
# bytes= RR.data

# generate a ckeck.json
###
def generate_check_json(result):
    if isinstance(result, dict):
        check_list= make_check_list(result)
                
    elif isinstance(result, list):
        check_list=[]
        for res in result:
            check_list.append(make_check_list(res))
    
    else:
        return
            
    byte_decoder.save2json_static(check_list, save_name= "check")
    print("check saved!")
    
    

def make_check_list(result):
    check_list= []
    result= decode_functions.clean_str2val(result)
    result= get_val(result)
    for key in result.keys():
        if 'block' in key:
            block_dict= dict()
            for key1 in result[key].keys():
                if 'I062' in key1:
                    block_dict[key1[:8]]= dict()
                    for key2, item in result[key][key1].items():
                        # block_dict[key1[:8]][key2]= get_val(item)
                        block_dict[key1[:8]][key2]= item


            check_list.append(block_dict)
                
    return check_list
   
            
def get_val(item):
    if isinstance(item, list):
        for it in item:
            it= get_val(it)
        return item
    
    elif isinstance(item, dict):
        ks= [k for k in item.keys()]
        if "val" in ks:
            tmp_dict= dict()
            tmp_dict["val"]= item["val"]
            
            return tmp_dict
        else:
            for k in ks:
                item[k]= get_val(item[k])
            return item

    elif isinstance(item, int) or isinstance(item, float):
        return {"val": item}
    
    else:
        return item



BD= byte_decoder(data= bytes)
generate_check_json(BD.process_byte_data())
###